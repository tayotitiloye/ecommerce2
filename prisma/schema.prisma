// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  isFeatured  Boolean  @default(false)
  image       String
  price       Decimal
  title       String
  category    String?
  description String?
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  price     Decimal
  products  Json[]
  address   String?
  name      String?
  // status    String
  //intent_id String?  @unique
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String
}

model Orders {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  price     Decimal?
  products  Json[]
  name      String
  address   String
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  Orders        Orders[]
  comment       Comment[]
  isAdmin       Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String    @id @default(cuid())
  slug  String    @unique
  title String
  posts Posting[]
}

model Posting {
  id       String   @id @default(cuid())
  title    String
  desc     String?
  price    Int
  category Category @relation(fields: [catSlug], references: [slug], onDelete: Cascade)
  catSlug  String
}

model Comment {
  id      String @id @default(cuid())
  comment String
  user    User   @relation(fields: [userId], references: [email], onDelete: Cascade)
  userId  String
}
